from fastai.vision.all import *
import matplotlib.pyplot as plt
import webbrowser

# download a sample of mnist data (3s and 7s)
path = untar_data(URLs.MNIST_SAMPLE)
print(path.ls())
print((path/'train').ls())

# saves and sorts the image names, shows top 10 of the 3s
threes = (path/'train'/'3').ls().sorted()
sevens = (path/'train'/'7').ls().sorted()
print(threes[:10])

# visualization of an image as data
'''
# grab and show a data point for 3
im3_path = threes[1]
im3 = Image.open(im3_path)
im3.show()

# as numpy array
print(array(im3)[4:10,4:10]) # views rows from [4,10) and cols from [4,10)
# as pytorch tensor
print(tensor(im3)[4:10,4:10])
# use pandas dataframe to color code values using a gradient; shows how an image is conjured from pixel values
im3_t = tensor(im3)
df = pd.DataFrame(im3_t[4:26,4:22])
df_formatted = df.style.set_properties(**{'font-size':'6pt'}).background_gradient('Greys')
# open image generated by the dataframe in browser
with open('pixel_image.html', 'w') as image:
    df_formatted.to_html(image)
filename = 'pixel_image.html'
webbrowser.open_new_tab(filename)
'''

# first try - pixel similarity
# convert each image into a tensor, using Python List Comprehension (shorter syntax to create a new list based on the values of an existing list)
# for every image in the list of sevens, open the image and convert it into a tensor. creates a list of tensors of our seven images.
seven_tensors = [tensor(Image.open(o)) for o in sevens]
three_tensors = [tensor(Image.open(o)) for o in threes]
print(len(three_tensors),len(seven_tensors))
show_image(three_tensors[1], cmap='binary')
plt.show()

# compute average of each pixel by stacking the tensors into a rank-3 tensor (3D tensor)
# convert the tensors from int->float for averaging. divide by 255 so they're [0,1] instead of [0,255]
stacked_sevens = torch.stack(seven_tensors).float()/255
stacked_threes = torch.stack(three_tensors).float()/255

# investigating tensor jargon
'''
print(stacked_threes.shape) # 6131 28x28 images stacked as a 3D tensor
print(len(stacked_threes.shape))    # length of a tensor's shape = rank of the tensor ->
print(stacked_threes.ndim)          # rank of a tensor (ndim) = number of axes in a tensor 
'''

# compute the "ideal" 3 and 7
mean3 = stacked_threes.mean(0)  # computes mean on the "horizontal" direction; not a global mean of ALL values. in this case, mean contains 1 pixel per image for our heatmap
show_image(mean3, cmap='binary')
plt.show()

mean7 = stacked_sevens.mean(0)
show_image(mean7, cmap='binary')
plt.show()
